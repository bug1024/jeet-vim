set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"----------------------------------------------------------------
" vundle插件管理工具
"----------------------------------------------------------------
Plugin 'gmarik/Vundle.vim'
"----------------------------------------------------------------

"----------------------------------------------------------------
" 状态栏美化
"----------------------------------------------------------------
Plugin 'itchyny/lightline.vim'
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'readonly': 'MyReadonly',
      \   'filename': 'MyFilename',
      \   'filetype': 'MyFiletype',
      \   'fileformat': 'MyFileformat',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤ "
  else
    return ""
  endif
endfunction

function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '⭠ '._ : ''
  endif
  return ''
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
                \ ('' != expand('%') ? expand('%') : '[NoName]')
endfunction

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
"----------------------------------------------------------------

"----------------------------------------------------------------
" solarized主题
"----------------------------------------------------------------
Plugin 'altercation/vim-colors-solarized'
"----------------------------------------------------------------

"----------------------------------------------------------------
" 目录树+git文件状态显示
"----------------------------------------------------------------
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeWinPos = "left"
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
let NERDTreeShowHidden= 1
let g:NERDTreeWinSize=30
map <F2> <plug>NERDTreeTabsToggle<CR>
map <leader>nb :NERDTreeFromBookmark 
map <leader>nf :NERDTreeFind<cr>
"----------------------------------------------------------------

"----------------------------------------------------------------
" 语法检查
"----------------------------------------------------------------
Plugin 'scrooloose/syntastic'
let g:syntastic_error_symbol        = '>>'
let g:syntastic_warning_symbol      = '>'
let g:syntastic_check_on_open       = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
highlight SyntasticErrorSign guifg=white guibg=black
"----------------------------------------------------------------

"----------------------------------------------------------------
" HTML
"----------------------------------------------------------------
Plugin 'gorodinskiy/vim-coloresque'
"----------------------------------------------------------------

"----------------------------------------------------------------
" PHP
"----------------------------------------------------------------
Plugin 'spf13/PIV'
let g:DisableAutoPHPFolding = 0
let g:PIVAutoClose = 0
"----------------------------------------------------------------

"----------------------------------------------------------------
" 自动补全
"----------------------------------------------------------------
Plugin 'Shougo/neocomplcache.vim'
" Enable neocomplcache
let g:neocomplcache_enable_at_startup = 1
"----------------------------------------------------------------

"----------------------------------------------------------------
" 代码片段补全
"----------------------------------------------------------------
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
let g:UltiSnipsSnippetsDir         = '~/.vim/UltiSnips'
map <leader>us :UltiSnipsEdit<CR>
" ctrl+j/k
func! g:JInYCM()
    if pumvisible()
        return "\<C-n>"
    else
        return "\<c-j>"
    endif
endfunction

func! g:KInYCM()
    if pumvisible()
        return "\<C-p>"
    else
        return "\<c-k>"
    endif
endfunction
inoremap <c-j> <c-r>=g:JInYCM()<cr>
au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
"----------------------------------------------------------------

"----------------------------------------------------------------
" 文件搜索
"----------------------------------------------------------------
Plugin 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
let g:ctrlp_working_path_mode     = 0
let g:ctrlp_match_window_bottom   = 1
let g:ctrlp_max_height            = 15
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_mruf_max              = 500
let g:ctrlp_follow_symlinks       = 1
"----------------------------------------------------------------

"----------------------------------------------------------------
" 函数搜索 无需生成tag
"----------------------------------------------------------------
Plugin 'tacahiroy/ctrlp-funky'
"----------------------------------------------------------------
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions             = ['funky']
"----------------------------------------------------------------

"----------------------------------------------------------------
" 文件编辑历史
"----------------------------------------------------------------
Plugin 'sjl/gundo.vim'
nnoremap <leader>h :GundoToggle<CR>
"----------------------------------------------------------------

"----------------------------------------------------------------
" 多光标编辑
"----------------------------------------------------------------
Plugin 'kristijanhusak/vim-multiple-cursors'
"----------------------------------------------------------------

"----------------------------------------------------------------
" 括弧美化
"----------------------------------------------------------------
Plugin 'kien/rainbow_parentheses.vim'
"----------------------------------------------------------------
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max            = 40
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
"----------------------------------------------------------------

"----------------------------------------------------------------
" 代码结构
"----------------------------------------------------------------
Plugin 'majutsushi/tagbar'
nmap <F3> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
"----------------------------------------------------------------

"----------------------------------------------------------------
" JS语法高亮
"----------------------------------------------------------------
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
let g:html_indent_inctags          = "html,body,head,tbody"
let g:html_indent_script1          = "inc"
let g:html_indent_style1           = "inc"
let g:javascript_conceal_function  = "ƒ"
let g:javascript_conceal_null      = "ø"
let g:javascript_conceal_this      = "@"
let g:javascript_conceal_return    = "⇚"
let g:javascript_conceal_undefined = "¿"
let g:javascript_conceal_NaN       = "ℕ"
let g:javascript_conceal_prototype = "¶"
let g:javascript_conceal_static    = "•"
let g:javascript_conceal_super     = "Ω"
"----------------------------------------------------------------

"----------------------------------------------------------------
" markdown语法 依赖tabular
"----------------------------------------------------------------
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
"----------------------------------------------------------------

"----------------------------------------------------------------
" 括弧/引号补全
"----------------------------------------------------------------
Plugin 'Raimondi/delimitMate'
"----------------------------------------------------------------

"----------------------------------------------------------------
" 代码对齐线美化
"----------------------------------------------------------------
Plugin 'Yggdroot/indentLine'
"----------------------------------------------------------------

"----------------------------------------------------------------
" surroundings
"----------------------------------------------------------------
Plugin 'tpope/vim-surround'
"----------------------------------------------------------------

"----------------------------------------------------------------
" 使用.来重复最近一条命令
"----------------------------------------------------------------
Plugin 'tpope/vim-repeat'
"----------------------------------------------------------------

"----------------------------------------------------------------
" 代码快速对齐
"----------------------------------------------------------------
Plugin 'junegunn/vim-easy-align'
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
"----------------------------------------------------------------

"----------------------------------------------------------------
" 行标记显示
"----------------------------------------------------------------
Plugin 'kshenoy/vim-signature'
"----------------------------------------------------------------

"----------------------------------------------------------------
" git
"----------------------------------------------------------------
Plugin 'tpope/vim-fugitive'
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
" Mnemonic _i_nteractive
nnoremap <silent> <leader>gi :Git add -p %<CR>
nnoremap <silent> <leader>gg :SignifyToggle<CR>
 
"----------------------------------------------------------------

"----------------------------------------------------------------
" git行状态修改显示
"----------------------------------------------------------------
Plugin 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
let g:gitgutter_enabled  = 1
let g:gitgutter_highlight_lines = 1
nnoremap <leader>gs :GitGutterToggle<CR>
"----------------------------------------------------------------

"----------------------------------------------------------------
" 图标美化 系统需安装相关字体https://github.com/ryanoasis/nerd-filetype-glyphs-fonts-patcher.git
"----------------------------------------------------------------
Plugin 'ryanoasis/vim-webdevicons'
"----------------------------------------------------------------

"----------------------------------------------------------------
" 代码注释
"----------------------------------------------------------------
Plugin 'scrooloose/nerdcommenter'
"----------------------------------------------------------------

call vundle#end()
filetype plugin indent on
